import asyncio
import os
import json
from datetime import datetime, date
from telegram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ USER_ID
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_ID_STR = os.getenv("USER_ID")

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
if not USER_ID_STR:
    raise ValueError("USER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")

try:
    USER_ID = int(USER_ID_STR)
except ValueError:
    raise ValueError(f"USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {USER_ID_STR}")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã Vancouver
vancouver_tz = pytz.timezone('America/Vancouver')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏
CIGARETTES_PER_DAY = 20  # –°–∫–æ–ª—å–∫–æ —Å–∏–≥–∞—Ä–µ—Ç –∫—É—Ä–∏–ª –≤ –¥–µ–Ω—å
CIGARETTES_PER_PACK = 20  # –°–∏–≥–∞—Ä–µ—Ç –≤ –ø–∞—á–∫–µ
PRICE_PER_PACK = 22  # –¶–µ–Ω–∞ –ø–∞—á–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–≤ –ö–∞–Ω–∞–¥–µ)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö
DATA_FILE = "quit_smoking_data.json"


def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è"""
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
                if 'start_date' in data:
                    return data

        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        today = date.today().isoformat()
        data = {
            'start_date': today,
            'total_days': 0
        }
        save_data(data)
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        today = date.today().isoformat()
        return {
            'start_date': today,
            'total_days': 0
        }


def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def calculate_days_and_savings():
    """–ü–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è –∏ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥"""
    data = load_data()

    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    start_date = datetime.fromisoformat(data['start_date']).date()
    today = date.today()
    days_passed = (today - start_date).days + 1  # +1 —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Å—á–∏—Ç–∞–ª—Å—è –∫–∞–∫ –¥–µ–Ω—å 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data['total_days'] = days_passed
    save_data(data)

    # –ü–æ–¥—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
    total_cigarettes_not_smoked = days_passed * CIGARETTES_PER_DAY
    packs_not_bought = total_cigarettes_not_smoked / CIGARETTES_PER_PACK
    money_saved = packs_not_bought * PRICE_PER_PACK

    return days_passed, money_saved, total_cigarettes_not_smoked


def get_motivational_message(day_number):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è"""
    if day_number == 1:
        return "–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å - —Ç—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫! üåü"
    elif day_number == 2:
        return "–û–≥–æ, —É–∂–µ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å! –û—Ç–ª–∏—á–Ω–æ –¥–µ—Ä–∂–∏—à—å—Å—è! üí™"
    elif day_number == 3:
        return "–î–µ–Ω—å —Ç—Ä–µ—Ç–∏–π - —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üî•"
    elif day_number <= 7:
        return f"–î–µ–Ω—å {day_number} - –Ω–µ–¥–µ–ª—è –ø–æ—á—Ç–∏ –∑–∞ –ø–ª–µ—á–∞–º–∏! üöÄ"
    elif day_number <= 14:
        return f"–î–µ–Ω—å {day_number} - —É–∂–µ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏! –ì–æ—Ä–¥–∏—Å—å —Å–æ–±–æ–π! üèÜ"
    elif day_number <= 30:
        return f"–î–µ–Ω—å {day_number} - –º–µ—Å—è—Ü –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! üéØ"
    elif day_number <= 90:
        return f"–î–µ–Ω—å {day_number} - —Ç—ã —É–∂–µ –ø—Ä–æ—Ñ–∏! –ú–µ—Å—è—Ü –∑–∞ –ø–ª–µ—á–∞–º–∏! üéñÔ∏è"
    else:
        return f"–î–µ–Ω—å {day_number} - —Ç—ã –ª–µ–≥–µ–Ω–¥–∞! –ü—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å! üåå"


async def send_daily_reminder():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –¥–Ω–µ–π –∏ —ç–∫–æ–Ω–æ–º–∏–∏"""
    try:
        days, money_saved, cigarettes_not_smoked = calculate_days_and_savings()
        motivational_msg = get_motivational_message(days)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"""üö≠ {motivational_msg}

üí∞ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${money_saved:.2f}
üö¨ –ù–µ –≤—ã–∫—É—Ä–µ–Ω–æ —Å–∏–≥–∞—Ä–µ—Ç: {cigarettes_not_smoked}
üì¶ –ù–µ –∫—É–ø–ª–µ–Ω–æ –ø–∞—á–µ–∫: {cigarettes_not_smoked / CIGARETTES_PER_PACK:.1f}

üèÉ‚Äç‚ôÇÔ∏è –¢–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"""

        await bot.send_message(chat_id=USER_ID, text=message)

        current_time = datetime.now(vancouver_tz)
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –î–µ–Ω—å {days}, —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ ${money_saved:.2f}, –≤—Ä–µ–º—è: {current_time}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    scheduler = AsyncIOScheduler(timezone=vancouver_tz)

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 6:40 —É—Ç—Ä–∞ Vancouver time
    scheduler.add_job(
        send_daily_reminder,
        CronTrigger(hour=6, minute=40, timezone=vancouver_tz),
        id='daily_reminder',
        name='–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É—Ä–µ–Ω–∏–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º'
    )

    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è Vancouver: {datetime.now(vancouver_tz)}")
    logger.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
    logger.info("- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: 6:40 AM Vancouver time")

    return scheduler


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        days, money_saved, cigarettes_not_smoked = calculate_days_and_savings()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler = await setup_scheduler()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        startup_message = f"""ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!

üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üóìÔ∏è –î–Ω–µ–π –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è: {days}
üí∞ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${money_saved:.2f}
üö¨ –ù–µ –≤—ã–∫—É—Ä–µ–Ω–æ: {cigarettes_not_smoked} —Å–∏–≥–∞—Ä–µ—Ç

‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 6:40 AM Vancouver time
üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(vancouver_tz).strftime('%H:%M:%S')}"""

        await bot.send_message(chat_id=USER_ID, text=startup_message)

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        logger.info("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        while True:
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if 'scheduler' in locals():
            scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())