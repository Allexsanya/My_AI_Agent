import os
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import random
from collections import defaultdict
import time
import logging
from datetime import datetime

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs("logs", exist_ok=True)

log_filename = os.path.join("logs", f"log_{datetime.now().strftime('%Y-%m-%d')}.txt")
error_log_filename = os.path.join("logs", f"errors_{datetime.now().strftime('%Y-%m-%d')}.txt")

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(log_filename, mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫
error_handler = logging.FileHandler(error_log_filename, mode='a', encoding='utf-8')
error_handler.setLevel(logging.ERROR)
logging.getLogger().addHandler(error_handler)

logger = logging.getLogger(__name__)
logger.addHandler(error_handler)


logger = logging.getLogger("telegram_bot")
logger.setLevel(logging.INFO)
logger.addHandler(error_handler)
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_dotenv(dotenv_path='secrets/keys.env')

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

client = OpenAI(api_key=OPENAI_API_KEY)

last_user_request = defaultdict(lambda: 0) # user_id -> timestamp

async def quote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quotes = [
        "–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ –ø–æ—Å—Ç—É–ø–∞—Ç—å? –ü–æ—Å—Ç—É–ø–∞–π –∫–∞–∫ –∑–Ω–∞–µ—à—å.",
        "–ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏–ª—Å—è, —Ç–æ –∏–¥–∏ –¥–æ–º–æ–π.",
        "–ï—Å–ª–∏ —Ç–æ–Ω–µ—à—å, —Ç–æ –ø–ª—ã–≤–∏ –∫ –±–µ—Ä–µ–≥—É."
    ]
    await update.message.reply_text(random.choice(quotes))

async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or "NoUsername"
    user_text = update.message.text
    # üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(user_text) > 500:
        await update.message.reply_text("üò∂ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–∫—Ä–∞—Ç–∏, –±—Ä–æ.")
        return

    # üßπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    SPAM_KEYWORDS = ["crypto", "sex", "porn", "http", "nude", "casino", "bitcoin"]
    if any(word in user_text.lower() for word in SPAM_KEYWORDS):
        logger.warning(f"SPAM BLOCKED from {username} ({user_id}): {user_text}")
        await update.message.reply_text("üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º.")
        return
    now = time.time()
    if now - last_user_request[user_id] < 10:
        await update.message.reply_text("Not so fast bro, I'm thinking")
        return
    last_user_request[user_id] = now
    user_question = update.message.text
    logger.info(f"[{username} | ID: {user_id}] -> {user_text}")
    if not user_question:
        await update.message.reply_text("–ë—Ä–æ, –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ask :)")
        return

    try:

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
                {"role": "user", "content": user_question}
            ]
        )
        answer = response.choices[0].message.content
        logger.info(f"User question: {user_question}")
        logger.info(f"OpenAI response: {answer}")
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"Error calling OpenAI API: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ask_command))

WEBHOOK_URL = "https://my-ai-bot-ehgw.onrender.com"  # ‚Üê —Å–≤–æ–π URL Render
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or "NoUsername"

    logger.info(f"[{username} | ID: {user_id}] sent /start")

    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ —É–º–Ω—ã–π –±–æ—Ç!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start_command))
application.add_handler(CommandHandler("help", start_command))  # –ü–æ–∫–∞ –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ –≤—Å—ë
application.run_webhook(
    listen="0.0.0.0",
    port=int(os.getenv("PORT", 10000)),
    webhook_url=WEBHOOK_URL,
)