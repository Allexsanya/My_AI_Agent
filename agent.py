import asyncio
import os
import logging
from datetime import datetime
from telegram.ext import ApplicationBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
from dotenv import load_dotenv
load_dotenv()
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º (–≤–∞–∂–Ω–æ –¥–ª—è Render)
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot_chat.chat_handler import setup_chat_handlers
from smoking_reminder.smoking_tracker import setup_smoking_scheduler, calculate_days_and_savings
from lina_water.water_reminder import setup_water_scheduler
from medicine_reminder.medicine_tracker import setup_medicine_scheduler
from french_reminder.french_tracker import setup_french_scheduler

# üîß –í–∫–ª—é—á–∞–µ–º tracemalloc
import tracemalloc

tracemalloc.start()

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('apscheduler').setLevel(logging.WARNING)

# üîê .env
load_dotenv(dotenv_path='secrets/keys.env')

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_ID = int(os.getenv("USER_ID", "0"))
LINA_USER_ID = int(os.getenv("LINA_USER_ID", "0")) if os.getenv("LINA_USER_ID") else None
MOTHER_USER_ID = int(os.getenv("MOTHER_USER_ID", "0")) if os.getenv("MOTHER_USER_ID") else None

if not TELEGRAM_TOKEN or USER_ID == 0:
    raise ValueError("‚ùå TELEGRAM_TOKEN –∏–ª–∏ USER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!")

vancouver_tz = pytz.timezone('America/Vancouver')
WEBHOOK_URL = "https://my-ai-bot-ehgw.onrender.com"


# üåû –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_startup_message(bot):
    try:
        days, money_saved, cigarettes_not_smoked = calculate_days_and_savings()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        active_reminders = []
        active_reminders.append("üö¨ –ö—É—Ä–µ–Ω–∏–µ: 6:40 AM")

        if LINA_USER_ID:
            active_reminders.append("üíß –í–æ–¥–∞ (–õ–∏–Ω–∞): –∫–∞–∂–¥—ã–π —á–∞—Å 7:00-22:00")

        if MOTHER_USER_ID:
            active_reminders.append("üíä –õ–µ–∫–∞—Ä—Å—Ç–≤–∞ (–ú–∞–º–∞): 8:00, 8:30, 14:00, 20:00, 20:30")

        active_reminders.append("üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π: 22:15")

        msg = (
                f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä–µ–Ω–∏—è:\n"
                f"üóìÔ∏è –î–Ω–µ–π –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è: {days}\n"
                f"üí∞ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${money_saved:.2f}\n"
                f"üö¨ –ù–µ –≤—ã–∫—É—Ä–µ–Ω–æ: {cigarettes_not_smoked} —Å–∏–≥–∞—Ä–µ—Ç\n\n"
                f"‚è∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" +
                "\n".join([f"   {reminder}" for reminder in active_reminders]) +
                f"\n\nüïí –í—Ä–µ–º—è Vancouver: {datetime.now(vancouver_tz).strftime('%H:%M:%S')}"
        )
        await bot.send_message(chat_id=USER_ID, text=msg)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞: {e}")


# üåê –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞
    setup_chat_handlers(application)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler(timezone=vancouver_tz)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    setup_smoking_scheduler(scheduler, application.bot, USER_ID)

    if LINA_USER_ID:
        setup_water_scheduler(scheduler, application.bot, LINA_USER_ID)
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –¥–ª—è Lina (ID: {LINA_USER_ID})")

    if MOTHER_USER_ID:
        setup_medicine_scheduler(scheduler, application.bot, MOTHER_USER_ID)
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö –¥–ª—è –º–∞–º—ã (ID: {MOTHER_USER_ID})")

    setup_french_scheduler(scheduler, application.bot, USER_ID)
    logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {USER_ID})")

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_startup_message(application.bot)

    logger.info(f"üü¢ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Webhook: {WEBHOOK_URL}")
    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        webhook_url=WEBHOOK_URL,
        drop_pending_updates=True
    )


if __name__ == "__main__":
    try:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")