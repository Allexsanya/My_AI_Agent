import asyncio
import os
import logging
from datetime import datetime
from telegram.ext import ApplicationBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
from dotenv import load_dotenv

from bot_chat.chat_handler import setup_chat_handlers
from smoking_reminder.smoking_tracker import setup_smoking_scheduler, calculate_days_and_savings
from lina_water.water_reminder import setup_water_scheduler

# üîß –í–∫–ª—é—á–∞–µ–º tracemalloc –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
import tracemalloc

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

tracemalloc.start()

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('apscheduler').setLevel(logging.WARNING)

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path='secrets/keys.env')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ ID
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
USER_ID_STR = os.getenv("USER_ID")
LINA_USER_ID_STR = os.getenv("LINA_USER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
if not USER_ID_STR:
    raise ValueError("USER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")

try:
    USER_ID = int(USER_ID_STR)
except ValueError:
    raise ValueError(f"USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {USER_ID_STR}")

# ID –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–æ–¥–µ
LINA_USER_ID = None
if LINA_USER_ID_STR:
    try:
        LINA_USER_ID = int(LINA_USER_ID_STR)
    except ValueError:
        logger.warning(f"LINA_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {LINA_USER_ID_STR}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
vancouver_tz = pytz.timezone('America/Vancouver')
LOCAL_TEST = False
WEBHOOK_URL = "https://my-ai-bot-ehgw.onrender.com"


async def send_startup_message(bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        days, money_saved, cigarettes_not_smoked = calculate_days_and_savings()
        startup_message = f"""ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!

üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É—Ä–µ–Ω–∏—è:
üóìÔ∏è –î–Ω–µ–π –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è: {days}
üí∞ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${money_saved:.2f}
üö¨ –ù–µ –≤—ã–∫—É—Ä–µ–Ω–æ: {cigarettes_not_smoked} —Å–∏–≥–∞—Ä–µ—Ç

‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ 6:40 AM Vancouver time
üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(vancouver_tz).strftime('%H:%M:%S')}"""

        await bot.send_message(chat_id=USER_ID, text=startup_message)
        logger.info("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    application = None
    scheduler = None

    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π
        setup_chat_handlers(application)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
        bot_info = await application.bot.get_me()
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler = AsyncIOScheduler(timezone=vancouver_tz)

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π
        setup_smoking_scheduler(scheduler, application.bot, USER_ID)
        if LINA_USER_ID:
            setup_water_scheduler(scheduler, application.bot, LINA_USER_ID)
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –≤–∫–ª—é—á–µ–Ω—ã")
        else:
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã (LINA_USER_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")

        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è Vancouver: {datetime.now(vancouver_tz)}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        await send_startup_message(application.bot)

        # –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if LOCAL_TEST:
            logger.info("üü° LOCAL_TEST –≤–∫–ª—é—á—ë–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞—é run_polling()")
            await application.run_polling(drop_pending_updates=True)
        else:
            logger.info(f"üü¢ PROD —Ä–µ–∂–∏–º ‚Äî –∑–∞–ø—É—Å–∫–∞—é run_webhook() –Ω–∞ {WEBHOOK_URL}")
            await application.run_webhook(
                listen="0.0.0.0",
                port=int(os.getenv("PORT", 10000)),
                webhook_url=WEBHOOK_URL,
                drop_pending_updates=True
            )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        if scheduler and scheduler.running:
            try:
                scheduler.shutdown(wait=False)
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        if application:
            try:
                await application.shutdown()
                logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π event loop"""
    try:
        try:
            loop = asyncio.get_running_loop()
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—é—â–∏–π event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ")
            import nest_asyncio
            nest_asyncio.apply()
            loop.run_until_complete(main())
        except RuntimeError:
            logger.info("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop")
            asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    run_bot()