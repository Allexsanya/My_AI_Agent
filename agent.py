import os
import logging
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import random
import time
from collections import defaultdict
from Smoke_reminder.reminder_scheduler import setup_scheduler as setup_smoke_scheduler

async def start_bot():
    await setup_smoke_scheduler()  # –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏

    if LOCAL_TEST:
        logger.info("üü° LOCAL_TEST –≤–∫–ª—é—á—ë–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞—é run_polling()")
        await application.run_polling()
    else:
        logger.info(f"üü¢ PROD —Ä–µ–∂–∏–º ‚Äî –∑–∞–ø—É—Å–∫–∞—é run_webhook() –Ω–∞ {WEBHOOK_URL}")
        await application.run_webhook(
            listen="0.0.0.0",
            port=int(os.getenv("PORT", 10000)),
            webhook_url=WEBHOOK_URL,
        )

# üîß –õ–æ–≥–≥–µ—Ä (–∫–æ–Ω—Å–æ–ª—å –¥–ª—è Render + file)
logger = logging.getLogger("telegram_bot")
logger.setLevel(logging.INFO)

if logger.hasHandlers():
    logger.handlers.clear()

formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')

console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)

file_handler = logging.FileHandler('logs/agent.log', encoding='utf-8')
file_handler.setFormatter(formatter)

logger.addHandler(console_handler)
logger.addHandler(file_handler)

logger.info("‚úÖ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø–∏—Å—å –∏–¥—ë—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª.")

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv(dotenv_path='secrets/keys.env')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

client = OpenAI(api_key=OPENAI_API_KEY)
last_user_request = defaultdict(lambda: 0)  # user_id -> timestamp
# Local flag test
LOCAL_TEST = False # put true for local run, falls for render

# üéØ –ö–æ–º–∞–Ω–¥–∞ /quote
async def quote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quotes = [
        "–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ –ø–æ—Å—Ç—É–ø–∞—Ç—å? –ü–æ—Å—Ç—É–ø–∞–π –∫–∞–∫ –∑–Ω–∞–µ—à—å.",
        "–ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏–ª—Å—è, —Ç–æ –∏–¥–∏ –¥–æ–º–æ–π.",
        "–ï—Å–ª–∏ —Ç–æ–Ω–µ—à—å, —Ç–æ –ø–ª—ã–≤–∏ –∫ –±–µ—Ä–µ–≥—É."
    ]
    await update.message.reply_text(random.choice(quotes))

# ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or "NoUsername"
    user_text = update.message.text

    # üßπ –°–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if len(user_text) > 500:
        await update.message.reply_text("üò∂ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–∫—Ä–∞—Ç–∏, –±—Ä–æ.")
        return

    if "http" in user_text.lower() or "@" in user_text:
        logger.warning(f"üîó LINK/SPAM from {username} ({user_id}): {user_text}")
        await update.message.reply_text("üö´ –°—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")
        return

    SPAM_KEYWORDS = ["crypto", "sex", "porn", "nude", "casino", "bitcoin"]
    if any(word in user_text.lower() for word in SPAM_KEYWORDS):
        logger.warning(f"SPAM BLOCKED from {username} ({user_id}): {user_text}")
        await update.message.reply_text("üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º.")
        return

    # ‚è± –ê–Ω—Ç–∏—Ñ–ª—É–¥
    now = time.time()
    if now - last_user_request[user_id] < 10:
        await update.message.reply_text("Not so fast bro, I'm thinking")
        return
    last_user_request[user_id] = now

    logger.info(f"[{username} | ID: {user_id}] -> {user_text}")
    user_question = update.message.text
    if not user_question:
        await update.message.reply_text("–ë—Ä–æ, –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ /ask :)")
        return

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
                {"role": "user", "content": user_question}
            ]
        )
        answer = response.choices[0].message.content
        logger.info(f"User question: {user_question}")
        logger.info(f"OpenAI response: {answer}")
        await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"Error calling OpenAI API: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

# üì§ –ö–æ–º–∞–Ω–¥–∞ /logs
async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üßæ –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Render ‚Üí Logs ‚Üí All logs.\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render, –ø–æ—ç—Ç–æ–º—É –ª–æ–≥-—Ñ–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ.")

# üåç Webhook URL
WEBHOOK_URL = "https://my-ai-bot-ehgw.onrender.com"

# üìå –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or "NoUsername"
    logger.info(f"[{username} | ID: {user_id}] sent /start")
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ —É–º–Ω—ã–π –±–æ—Ç!")

# üõ†Ô∏è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ask_command))
application.add_handler(CommandHandler("start", start_command))
application.add_handler(CommandHandler("help", start_command))
application.add_handler(CommandHandler("quote", quote_command))
application.add_handler(CommandHandler("logs", logs_command))

# üöÄ –ó–∞–ø—É—Å–∫

if LOCAL_TEST:
    logger.info("üü° LOCAL_TEST –≤–∫–ª—é—á—ë–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞—é run_polling()")
    application.run_polling()
else:
    logger.info(f"üü¢ PROD —Ä–µ–∂–∏–º ‚Äî –∑–∞–ø—É—Å–∫–∞—é run_webhook() –Ω–∞ {WEBHOOK_URL}")
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        webhook_url=WEBHOOK_URL,
    )
# from venv.Smoke_reminder.reminder_scheduler import setup_scheduler
# setup_scheduler()
import asyncio

if __name__ == "__main__":
    asyncio.run(start_bot())