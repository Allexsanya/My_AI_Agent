import os
import logging
import random
import time
from collections import defaultdict
from openai import OpenAI
from telegram import Update
from telegram.ext import CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path='secrets/keys.env')

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ê–Ω—Ç–∏—Ñ–ª—É–¥
last_user_request = defaultdict(lambda: 0)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    user_id = user.id
    username = user.username or "NoUsername"
    logger.info(f"[{username} | ID: {user_id}] sent /start")
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ —É–º–Ω—ã–π –±–æ—Ç!")


async def quote_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /quote - —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞"""
    quotes = [
        "–ù–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ –ø–æ—Å—Ç—É–ø–∞—Ç—å? –ü–æ—Å—Ç—É–ø–∞–π –∫–∞–∫ –∑–Ω–∞–µ—à—å.",
        "–ï—Å–ª–∏ –∑–∞–±–ª—É–¥–∏–ª—Å—è, —Ç–æ –∏–¥–∏ –¥–æ–º–æ–π.",
        "–ï—Å–ª–∏ —Ç–æ–Ω–µ—à—å, —Ç–æ –ø–ª—ã–≤–∏ –∫ –±–µ—Ä–µ–≥—É.",
        "–ì–ª–∞–≤–Ω–æ–µ - –Ω–µ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å –∏ –∏–¥—Ç–∏ –≤–ø–µ—Ä–µ–¥.",
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ.",
        "–£—Å–ø–µ—Ö - —ç—Ç–æ –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.",
        "–ù–µ –±–æ–π—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ –∏–¥—Ç–∏, –±–æ–π—Å—è —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ.",
        "–õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –±—É–¥—É—â–µ–µ - —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ."
    ]
    await update.message.reply_text(random.choice(quotes))


async def logs_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /logs - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö"""
    await update.message.reply_text(
        "üßæ –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Render ‚Üí Logs ‚Üí All logs.\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render, –ø–æ—ç—Ç–æ–º—É –ª–æ–≥-—Ñ–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–º–æ—â—å"""
    help_text = """ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/quote - –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
/logs - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò! ‚ú®"""

    await update.message.reply_text(help_text)


async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI"""
    user = update.effective_user
    user_id = user.id
    username = user.username or "NoUsername"
    user_text = update.message.text

    # –°–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if len(user_text) > 500:
        await update.message.reply_text("üò∂ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–∫—Ä–∞—Ç–∏, –±—Ä–æ.")
        return

    if "http" in user_text.lower() or "@" in user_text:
        logger.warning(f"üîó LINK/SPAM from {username} ({user_id}): {user_text}")
        await update.message.reply_text("üö´ –°—Å—ã–ª–∫–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")
        return

    SPAM_KEYWORDS = ["crypto", "sex", "porn", "nude", "casino", "bitcoin", "gambling"]
    if any(word in user_text.lower() for word in SPAM_KEYWORDS):
        logger.warning(f"SPAM BLOCKED from {username} ({user_id}): {user_text}")
        await update.message.reply_text("üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∞–º.")
        return

    # –ê–Ω—Ç–∏—Ñ–ª—É–¥
    now = time.time()
    if now - last_user_request[user_id] < 10:
        await update.message.reply_text("‚è≥ –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –±—Ä–æ! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
        return
    last_user_request[user_id] = now

    logger.info(f"[{username} | ID: {user_id}] -> {user_text}")

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        response = openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–æ —Å —é–º–æ—Ä–æ–º –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ. –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                },
                {"role": "user", "content": user_text}
            ],
            max_tokens=500,
            temperature=0.7
        )

        answer = response.choices[0].message.content
        logger.info(f"User question: {user_text}")
        logger.info(f"OpenAI response: {answer}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await update.message.reply_text(answer)

    except Exception as e:
        logger.error(f"Error calling OpenAI API: {e}")
        error_messages = [
            "ü§ñ –ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–∏–º–∏ –º–æ–∑–≥–∞–º–∏!",
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            "‚ùå –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –Ω–æ —è —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º!"
        ]
        await update.message.reply_text(random.choice(error_messages))


def setup_chat_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–∞—Ç–∞"""
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("quote", quote_command))
    application.add_handler(CommandHandler("logs", logs_command))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ask_command))

    logger.info("Chat handlers –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")