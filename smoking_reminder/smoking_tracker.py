import os
import json
import logging
from datetime import datetime, date
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è
CIGARETTES_PER_DAY = 20
CIGARETTES_PER_PACK = 20
PRICE_PER_PACK = 22
DATA_FILE = "smoking_reminder/quit_smoking_data.json"

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
vancouver_tz = pytz.timezone('America/Vancouver')


def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)

        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if 'start_date' in data:
                    return data

        today = date.today().isoformat()
        data = {
            'start_date': today,
            'total_days': 0,
            'created_at': datetime.now().isoformat()
        }
        save_data(data)
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        today = date.today().isoformat()
        return {
            'start_date': today,
            'total_days': 0,
            'created_at': datetime.now().isoformat()
        }


def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–Ω—è—Ö –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)

        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def calculate_days_and_savings():
    """–ü–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è –∏ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥"""
    data = load_data()
    start_date = datetime.fromisoformat(data['start_date']).date()
    today = date.today()
    days_passed = (today - start_date).days + 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data['total_days'] = days_passed
    data['last_calculated'] = datetime.now().isoformat()
    save_data(data)

    # –†–∞—Å—á–µ—Ç—ã
    total_cigarettes_not_smoked = days_passed * CIGARETTES_PER_DAY
    packs_not_bought = total_cigarettes_not_smoked / CIGARETTES_PER_PACK
    money_saved = packs_not_bought * PRICE_PER_PACK

    return days_passed, money_saved, total_cigarettes_not_smoked


def get_motivational_message(day_number):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è"""
    messages = {
        1: "–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å - —Ç—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫! üåü",
        2: "–û–≥–æ, —É–∂–µ –≤—Ç–æ—Ä–æ–π –¥–µ–Ω—å! –û—Ç–ª–∏—á–Ω–æ –¥–µ—Ä–∂–∏—à—å—Å—è! üí™",
        3: "–î–µ–Ω—å —Ç—Ä–µ—Ç–∏–π - —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üî•",
        7: "–ù–µ–¥–µ–ª—è –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! üöÄ",
        14: "–î–≤–µ –Ω–µ–¥–µ–ª–∏! –¢—ã –ø—Ä–æ—Å—Ç–æ –º–æ–ª–æ–¥–µ—Ü! üèÜ",
        30: "–ú–µ—Å—è—Ü –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è! –õ–µ–≥–µ–Ω–¥–∞! üéØ",
        60: "–î–≤–∞ –º–µ—Å—è—Ü–∞! –¢—ã –ø—Ä–æ—Ñ–∏! üéñÔ∏è",
        90: "–¢—Ä–∏ –º–µ—Å—è—Ü–∞! –ü—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å! üåå",
        180: "–ü–æ–ª–≥–æ–¥–∞! –¢—ã –≥–µ—Ä–æ–π! ü¶∏‚Äç‚ôÇÔ∏è",
        365: "–ì–û–î –ë–ï–ó –ö–£–†–ï–ù–ò–Ø! –ß–ï–ú–ü–ò–û–ù! üèÖ"
    }

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–Ω—è
    if day_number in messages:
        return messages[day_number]

    # –ò–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    if day_number <= 7:
        return f"–î–µ–Ω—å {day_number} - –Ω–µ–¥–µ–ª—è –ø–æ—á—Ç–∏ –∑–∞ –ø–ª–µ—á–∞–º–∏! üöÄ"
    elif day_number <= 14:
        return f"–î–µ–Ω—å {day_number} - —É–∂–µ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏! –ì–æ—Ä–¥–∏—Å—å —Å–æ–±–æ–π! üèÜ"
    elif day_number <= 30:
        return f"–î–µ–Ω—å {day_number} - –º–µ—Å—è—Ü –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! üéØ"
    elif day_number <= 90:
        return f"–î–µ–Ω—å {day_number} - —Ç—ã —É–∂–µ –ø—Ä–æ—Ñ–∏! –ú–µ—Å—è—Ü –∑–∞ –ø–ª–µ—á–∞–º–∏! üéñÔ∏è"
    elif day_number <= 180:
        return f"–î–µ–Ω—å {day_number} - –ø–æ–ª–≥–æ–¥–∞ –ø–æ—á—Ç–∏ —Ä—è–¥–æ–º! üåü"
    elif day_number <= 365:
        return f"–î–µ–Ω—å {day_number} - –≥–æ–¥ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ! –õ–µ–≥–µ–Ω–¥–∞! üåå"
    else:
        years = day_number // 365
        remaining_days = day_number % 365
        return f"–î–µ–Ω—å {day_number} ({years} –ª–µ—Ç {remaining_days} –¥–Ω–µ–π) - —Ç—ã –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞! üèÖ"


def get_health_benefit(day_number):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è"""
    if day_number == 1:
        return "ü´Å –ß–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç –ø—É–ª—å—Å –∏ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç—Å—è!"
    elif day_number == 2:
        return "üëÉ –í–∫—É—Å –∏ –∑–∞–ø–∞—Ö —É–∂–µ –Ω–∞—á–∏–Ω–∞—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è!"
    elif day_number == 3:
        return "üí™ –î—ã—Ö–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–µ–≥—á–µ, —ç–Ω–µ—Ä–≥–∏–∏ –±–æ–ª—å—à–µ!"
    elif day_number <= 7:
        return "üîã –ù–∏–∫–æ—Ç–∏–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—à–µ–ª –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–º–∞!"
    elif day_number <= 14:
        return "üèÉ‚Äç‚ôÇÔ∏è –ö—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç—Å—è, –ª–µ–≥—á–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º!"
    elif day_number <= 30:
        return "ü´Å –§—É–Ω–∫—Ü–∏—è –ª–µ–≥–∫–∏—Ö —É–ª—É—á—à–∞–µ—Ç—Å—è –Ω–∞ 30%!"
    elif day_number <= 90:
        return "‚ù§Ô∏è –†–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—É–ø–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–µ–Ω!"
    elif day_number <= 365:
        return "ü©∫ –†–∏—Å–∫ –∏–Ω—Å—É–ª—å—Ç–∞ —Å–Ω–∏–∑–∏–ª—Å—è –≤ 2 —Ä–∞–∑–∞!"
    else:
        return "üåü –¢–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç —Ç–µ–±—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"


async def send_daily_smoking_reminder(bot, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É—Ä–µ–Ω–∏–∏"""
    try:
        days, money_saved, cigarettes_not_smoked = calculate_days_and_savings()
        motivational_msg = get_motivational_message(days)
        health_benefit = get_health_benefit(days)

        # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        packs_not_bought = cigarettes_not_smoked / CIGARETTES_PER_PACK

        message = f"""üö≠ {motivational_msg}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π:
üí∞ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: ${money_saved:.2f}
üö¨ –ù–µ –≤—ã–∫—É—Ä–µ–Ω–æ: {cigarettes_not_smoked} —Å–∏–≥–∞—Ä–µ—Ç
üì¶ –ù–µ –∫—É–ø–ª–µ–Ω–æ: {packs_not_bought:.1f} –ø–∞—á–µ–∫

{health_benefit}

üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"""

        await bot.send_message(chat_id=user_id, text=message)
        current_time = datetime.now(vancouver_tz)
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É—Ä–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –î–µ–Ω—å {days}, –≤—Ä–µ–º—è: {current_time}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫—É—Ä–µ–Ω–∏–∏: {e}")


def setup_smoking_scheduler(scheduler, bot, user_id):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∫—É—Ä–µ–Ω–∏–∏"""
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É—Ä–µ–Ω–∏–∏ –≤ 6:40 —É—Ç—Ä–∞ Vancouver time
    scheduler.add_job(
        lambda: send_daily_smoking_reminder(bot, user_id),
        CronTrigger(hour=6, minute=40, timezone=vancouver_tz),
        id='daily_smoking_reminder',
        name='–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É—Ä–µ–Ω–∏–∏'
    )

    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫—É—Ä–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω: 6:40 AM Vancouver time")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_smoking_reminder(bot, user_id):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await send_daily_smoking_reminder(bot, user_id)
    logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")